{"filter":false,"title":"simple-todos.js","tooltip":"/simple-todos.js","undoManager":{"mark":7,"position":7,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":39,"column":1},"action":"remove","lines":["// simple-todos.js","Tasks = new Mongo.Collection(\"tasks\");","","if (Meteor.isClient) {","  // This code only runs on the client","  Template.body.helpers({","    tasks: function () {","      return Tasks.find({}, {sort: {createdAt: -1}});","    }","  });","  // Inside the if (Meteor.isClient) block, right after Template.body.helpers:","  Template.body.events({","    \"submit .new-task\": function (event) {","      // This function is called when the new task form is submitted","","      var text = event.target.text.value;","      console.log(event);","","      Tasks.insert({","        text: text,","        createdAt: new Date() // current time","      });","","      // Clear form","      event.target.text.value = \"\";","","      // Prevent default form submit","      return false;","    }","  });","  Template.task.events({","  \"click .toggle-checked\": function () {","    // Set the checked property to the opposite of its current value","    Tasks.update(this._id, {$set: {checked: ! this.checked}});","  },","  \"click .delete\": function () {","    Tasks.remove(this._id);","  }","  });","}"]},{"start":{"row":0,"column":0},"end":{"row":52,"column":1},"action":"insert","lines":["Tasks = new Mongo.Collection(\"tasks\");","","if (Meteor.isClient) {","  // This code only runs on the client","  Template.body.helpers({","    tasks: function () {","      if (Session.get(\"hideCompleted\")) {","        // If hide completed is checked, filter tasks","        return Tasks.find({checked: {$ne: true}}, {sort: {createdAt: -1}});","      } else {","        // Otherwise, return all of the tasks","        return Tasks.find({}, {sort: {createdAt: -1}});","      }","    },","    hideCompleted: function () {","      return Session.get(\"hideCompleted\");","    },","    incompleteCount: function () {","      return Tasks.find({checked: {$ne: true}}).count();","    }","  });","","  Template.body.events({","    \"submit .new-task\": function (event) {","      // This function is called when the new task form is submitted","      var text = event.target.text.value;","","      Tasks.insert({","        text: text,","        createdAt: new Date() // current time","      });","","      // Clear form","      event.target.text.value = \"\";","","      // Prevent default form submit","      return false;","    },","    \"change .hide-completed input\": function (event) {","      Session.set(\"hideCompleted\", event.target.checked);","    }","  });","","  Template.task.events({","    \"click .toggle-checked\": function () {","      // Set the checked property to the opposite of its current value","      Tasks.update(this._id, {$set: {checked: ! this.checked}});","    },","    \"click .delete\": function () {","      Tasks.remove(this._id);","    }","  });","}"]}]}],[{"group":"doc","deltas":[{"start":{"row":51,"column":5},"end":{"row":52,"column":0},"action":"insert","lines":["",""]},{"start":{"row":52,"column":0},"end":{"row":52,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":52,"column":2},"end":{"row":53,"column":0},"action":"insert","lines":["",""]},{"start":{"row":53,"column":0},"end":{"row":53,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":53,"column":2},"end":{"row":55,"column":3},"action":"insert","lines":["Accounts.ui.config({","  passwordSignupFields: \"USERNAME_ONLY\"","});"]}]}],[{"group":"doc","deltas":[{"start":{"row":55,"column":0},"end":{"row":55,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":54,"column":2},"end":{"row":54,"column":4},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":56,"column":1},"action":"remove","lines":["Tasks = new Mongo.Collection(\"tasks\");","","if (Meteor.isClient) {","  // This code only runs on the client","  Template.body.helpers({","    tasks: function () {","      if (Session.get(\"hideCompleted\")) {","        // If hide completed is checked, filter tasks","        return Tasks.find({checked: {$ne: true}}, {sort: {createdAt: -1}});","      } else {","        // Otherwise, return all of the tasks","        return Tasks.find({}, {sort: {createdAt: -1}});","      }","    },","    hideCompleted: function () {","      return Session.get(\"hideCompleted\");","    },","    incompleteCount: function () {","      return Tasks.find({checked: {$ne: true}}).count();","    }","  });","","  Template.body.events({","    \"submit .new-task\": function (event) {","      // This function is called when the new task form is submitted","      var text = event.target.text.value;","","      Tasks.insert({","        text: text,","        createdAt: new Date() // current time","      });","","      // Clear form","      event.target.text.value = \"\";","","      // Prevent default form submit","      return false;","    },","    \"change .hide-completed input\": function (event) {","      Session.set(\"hideCompleted\", event.target.checked);","    }","  });","","  Template.task.events({","    \"click .toggle-checked\": function () {","      // Set the checked property to the opposite of its current value","      Tasks.update(this._id, {$set: {checked: ! this.checked}});","    },","    \"click .delete\": function () {","      Tasks.remove(this._id);","    }","  });","  ","  Accounts.ui.config({","    passwordSignupFields: \"USERNAME_ONLY\"","  });","}"]},{"start":{"row":0,"column":0},"end":{"row":58,"column":1},"action":"insert","lines":["Tasks = new Mongo.Collection(\"tasks\");","","if (Meteor.isClient) {","  // This code only runs on the client","  Template.body.helpers({","    tasks: function () {","      if (Session.get(\"hideCompleted\")) {","        // If hide completed is checked, filter tasks","        return Tasks.find({checked: {$ne: true}}, {sort: {createdAt: -1}});","      } else {","        // Otherwise, return all of the tasks","        return Tasks.find({}, {sort: {createdAt: -1}});","      }","    },","    hideCompleted: function () {","      return Session.get(\"hideCompleted\");","    },","    incompleteCount: function () {","      return Tasks.find({checked: {$ne: true}}).count();","    }","  });","","  Template.body.events({","    \"submit .new-task\": function (event) {","      // This function is called when the new task form is submitted","      var text = event.target.text.value;","","      Tasks.insert({","        text: text,","        createdAt: new Date(),            // current time","        owner: Meteor.userId(),           // _id of logged in user","        username: Meteor.user().username  // username of logged in user","      });","","      // Clear form","      event.target.text.value = \"\";","","      // Prevent default form submit","      return false;","    },","    \"change .hide-completed input\": function (event) {","      Session.set(\"hideCompleted\", event.target.checked);","    }","  });","","  Template.task.events({","    \"click .toggle-checked\": function () {","      // Set the checked property to the opposite of its current value","      Tasks.update(this._id, {$set: {checked: ! this.checked}});","    },","    \"click .delete\": function () {","      Tasks.remove(this._id);","    }","  });","","  Accounts.ui.config({","    passwordSignupFields: \"USERNAME_ONLY\"","  });","}"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":58,"column":1},"action":"remove","lines":["Tasks = new Mongo.Collection(\"tasks\");","","if (Meteor.isClient) {","  // This code only runs on the client","  Template.body.helpers({","    tasks: function () {","      if (Session.get(\"hideCompleted\")) {","        // If hide completed is checked, filter tasks","        return Tasks.find({checked: {$ne: true}}, {sort: {createdAt: -1}});","      } else {","        // Otherwise, return all of the tasks","        return Tasks.find({}, {sort: {createdAt: -1}});","      }","    },","    hideCompleted: function () {","      return Session.get(\"hideCompleted\");","    },","    incompleteCount: function () {","      return Tasks.find({checked: {$ne: true}}).count();","    }","  });","","  Template.body.events({","    \"submit .new-task\": function (event) {","      // This function is called when the new task form is submitted","      var text = event.target.text.value;","","      Tasks.insert({","        text: text,","        createdAt: new Date(),            // current time","        owner: Meteor.userId(),           // _id of logged in user","        username: Meteor.user().username  // username of logged in user","      });","","      // Clear form","      event.target.text.value = \"\";","","      // Prevent default form submit","      return false;","    },","    \"change .hide-completed input\": function (event) {","      Session.set(\"hideCompleted\", event.target.checked);","    }","  });","","  Template.task.events({","    \"click .toggle-checked\": function () {","      // Set the checked property to the opposite of its current value","      Tasks.update(this._id, {$set: {checked: ! this.checked}});","    },","    \"click .delete\": function () {","      Tasks.remove(this._id);","    }","  });","","  Accounts.ui.config({","    passwordSignupFields: \"USERNAME_ONLY\"","  });","}"]},{"start":{"row":0,"column":0},"end":{"row":75,"column":3},"action":"insert","lines":["Tasks = new Mongo.Collection(\"tasks\");","","if (Meteor.isClient) {","  // This code only runs on the client","  Template.body.helpers({","    tasks: function () {","      if (Session.get(\"hideCompleted\")) {","        // If hide completed is checked, filter tasks","        return Tasks.find({checked: {$ne: true}}, {sort: {createdAt: -1}});","      } else {","        // Otherwise, return all of the tasks","        return Tasks.find({}, {sort: {createdAt: -1}});","      }","    },","    hideCompleted: function () {","      return Session.get(\"hideCompleted\");","    },","    incompleteCount: function () {","      return Tasks.find({checked: {$ne: true}}).count();","    }","  });","","  Template.body.events({","    \"submit .new-task\": function (event) {","      // This function is called when the new task form is submitted","      var text = event.target.text.value;","","      Meteor.call(\"addTask\", text);","","      // Clear form","      event.target.text.value = \"\";","","      // Prevent default form submit","      return false;","    },","    \"change .hide-completed input\": function (event) {","      Session.set(\"hideCompleted\", event.target.checked);","    }","  });","","  Template.task.events({","    \"click .toggle-checked\": function () {","      // Set the checked property to the opposite of its current value","      Meteor.call(\"setChecked\", this._id, ! this.checked);","    },","    \"click .delete\": function () {","      Meteor.call(\"deleteTask\", this._id);","    }","  });","","  Accounts.ui.config({","    passwordSignupFields: \"USERNAME_ONLY\"","  });","}","","Meteor.methods({","  addTask: function (text) {","    // Make sure the user is logged in before inserting a task","    if (! Meteor.userId()) {","      throw new Meteor.Error(\"not-authorized\");","    }","","    Tasks.insert({","      text: text,","      createdAt: new Date(),","      owner: Meteor.userId(),","      username: Meteor.user().username","    });","  },","  deleteTask: function (taskId) {","    Tasks.remove(taskId);","  },","  setChecked: function (taskId, setChecked) {","    Tasks.update(taskId, { $set: { checked: setChecked} });","  }","});"]}]}]]},"ace":{"folds":[],"scrolltop":310,"scrollleft":0,"selection":{"start":{"row":75,"column":3},"end":{"row":75,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":21,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1427697849774,"hash":"db16c7257daaa710ae9360c64a8ca171fd008aaa"}